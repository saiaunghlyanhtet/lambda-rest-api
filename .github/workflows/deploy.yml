name: Deploy to AWS

on:
  push:
    tags:
      - v*

jobs:
  install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

  deploy:
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Zip Lambda function
        run: zip terraform/lambda_function.zip api.py

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Get API Gateway ID
        id: get_api_id
        run: |
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='crud-api'].id" --output text)
          echo "API_ID=${API_ID}" >> $GITHUB_ENV

      - name: Get Resource ID
        id: get_resource_id
        run: |
          RESOURCE_ID=$(aws apigateway get-resources --rest-api-id ${{ env.API_ID }} --query "items[?path=='/items'].id" --output text)
          echo "RESOURCE_ID=${RESOURCE_ID}" >> $GITHUB_ENV

      - name: Get Lambda Function Name
        id: get_lambda_function_name
        run: |
          FUNCTION_NAME=$(aws lambda list-functions --query "Functions[?FunctionName=='crudLambdaFunction'].FunctionArn" --output text)
          echo "FUNCTION_NAME=${FUNCTION_NAME}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Import
        run: |
          terraform import aws_dynamodb_table.items_table items
          terraform import aws_iam_role.lambda_exec_role lambda_exec_role
          terraform import aws_lambda_function.crud_lambda ${{ env.FUNCTION_NAME }}
          terraform import aws_api_gateway_rest_api.crud_api ${{ env.API_ID }}
          terraform import aws_api_gateway_resource.items ${{ env.API_ID }}/${{ env.RESOURCE_ID }}
          terraform import aws_api_gateway_method.items_method_get ${{ env.API_ID }}/${{ env.RESOURCE_ID }}/GET
          terraform import aws_api_gateway_method.items_method_post ${{ env.API_ID }}/${{ env.RESOURCE_ID }}/POST
          terraform import aws_api_gateway_method.items_method_put ${{ env.API_ID }}/${{ env.RESOURCE_ID }}/PUT
          terraform import aws_api_gateway_method.items_method_delete ${{ env.API_ID }}/${{ env.RESOURCE_ID }}/DELETE
          terraform import aws_api_gateway_integration.lambda_integration_get ${{ env.API_ID }}/${{ env.RESOURCE_ID }}/GET
          terraform import aws_api_gateway_integration.lambda_integration_post ${{ env.API_ID }}/${{ env.RESOURCE_ID }}/POST
          terraform import aws_api_gateway_integration.lambda_integration_put ${{ env.API_ID }}/${{ env.RESOURCE_ID }}/PUT
          terraform import aws_api_gateway_integration.lambda_integration_delete ${{ env.API_ID }}/${{ env.RESOURCE_ID }}/DELETE
          terraform import aws_lambda_permission.api_gateway_permission ${{ env.FUNCTION_NAME }}
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
